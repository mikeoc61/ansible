---
# Anisble Playbook to create an EC2 instance based on specified AMI,
# create a security group and install a web server on the EC2 instance
- hosts: local
  connection: local
  gather_facts: False
  vars:
    instance_type: t2.micro
    security_group: webservers_sg
    image: ami-0506190ca37fab844
    keypair: devops
    region: us-east-1
    count: 2
  vars_files:
    - aws_keys.yml

  tasks:
    - name: Create a security group
      ec2_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: "{{ security_group }}"
        description: Webservers security group
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Launch the new EC2 Instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: true
        region: "{{ region }}"
        keypair: "{{ keypair }}"
        count: "{{count}}"
      register: ec2

    - name: Add newly created host so that we can contact 
      add_host: hostname={{ item.public_ip }} groups=webservers
      loop: "{{ ec2.instances }}"

    - name: Add tag to Instance(s)
      ec2_tag:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        resource: "{{ item.id }}"
        region: "{{ region }}"
        state: "present"
      with_items: "{{ ec2.instances }}"
      args:
        tags:
          Type: webserver

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        state: started
      with_items: "{{ ec2.instances }}"

# Now that our EC2 Instance(s) are running, Install Web Server(s)

- hosts: webservers
  remote_user: ubuntu
  become: yes
  gather_facts: no
  pre_tasks:
    - name: 'install python'
      raw: 'sudo apt-get -y install python'
  tasks:
    - name: Install Apache
      apt:
        name: apache2
        state: present
    - service:
        name: apache2
        state: started
        enabled: yes
